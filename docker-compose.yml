version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: healthcare_postgres
    environment:
      POSTGRES_USER: healthcare
      POSTGRES_PASSWORD: healthcare123
      POSTGRES_DB: healthcare_ai
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U healthcare"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (optional, for caching)
  redis:
    image: redis:7-alpine
    container_name: healthcare_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      target: backend
    container_name: healthcare_backend
    environment:
      DATABASE_URL: postgresql://healthcare:healthcare123@postgres:5432/healthcare_ai
      REDIS_URL: redis://redis:6379/0
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev-secret-key-change-in-production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-dev-encryption-key-32-bytes-long!}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
      - ./data:/app/data
    restart: unless-stopped

  # Frontend (optional for local deployment)
  # frontend:
  #   build:
  #     context: .
  #     target: frontend
  #   container_name: healthcare_frontend
  #   environment:
  #     NEXT_PUBLIC_API_URL: http://localhost:8000
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - backend
  #   restart: unless-stopped

volumes:
  postgres_data:
